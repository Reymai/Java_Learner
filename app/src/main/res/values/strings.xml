<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name" translatable="false">Java Learner</string>
    <string name="login">Login</string>
    <string name="sign_up">Sign-up</string>
    <string name="repeat_password">Repeat password</string>
    <string name="forgot_the_password" translatable="false">Forgot your password?</string>
    <string name="e_mail">E-mail</string>
    <string name="username">Username</string>
    <string name="Registration_to_login_string" translatable="false">Already have an account? Login here!</string>
    <string name="Login_to_registration_string">Don\'t have an account? Sign-up here!</string>
    <string name="Level" translatable="false">Level</string>
    <string name="language">Language</string>
    <string name="sound">Sound</string>
    <string name="banner_ad_unit_id" translatable="false">ca-app-pub-6687150084219522/9670294087</string>
    <string name="Java_Basic" translatable="false">1 What is Java?  Java is a universal programming language, which is based on the Object Oriented Programming. This language is used in Android Applications, for some smart things, for example: Kettle, Clock, Bracelets, etc., in some cars and computer applications.</string>
    <string name="Java_Basic_2" translatable="false">2 Java Syntaxes  Syntaxes in Java go to classes, objects, methods, variable instances.  Objects - objects have state and behavior. For example: a dog can have a state - color, name, as well as behavior - nod, run, bark, eat. An object is an instance of a class.  Class - can be defined as a template that describes the behavior of an object.  Method - is basically a behavior. A class can contain several methods. It is in methods that logically recorded data manipulate and perform all actions.  Instance Variable - Each object has its own unique set of instance variables. An object state is created by the values ​​assigned to these instance variables.</string>
    <string name="Java_Basic_3" translatable="false">2.1 Java Syntaxes  Let\'s look at simple code     public class MyFirstJavaProgram // create a public class MyFirstJavaProgram     {public static void main (String [] args) {// create a static public string method      / System.out.println (\"hello world!\"); // Display the message on the screen}} // display the sentence “hello world!”</string>
    <string name="Java_Basic_4" translatable="false">2.2 Basics of Java Syntax  It is very important to know and remember the following points in the syntax:  Case-sensitive - Java is case-sensitive, that is, the identifier Hello and hello have different meanings.  Class name - for all, the first letter should be in upper case.  If several words are used to form a class name, the first letter of each inner word must be in upper case, for example, “MyJavaClass”.  Method Name - In Java syntax, all method names must begin with a lowercase letter.  If several words are used to form the name of the method, then the first letter of each inner word must be in upper case, for example, “public void myMethodName ()”.  Program file name - the program file name must exactly match the class name.  When saving a file, you must save it using the class name (remember case sensitivity) and add “.java” at the end of the name (if the names do not match, your program will not compile), for example, “MyJavaProgram” is the name of the class , then the file should be saved as “MyJavaProgram.java”.  public static void main (String args []) - program processing begins with the main () method, which is an essential part of each program.</string>
    <string name="Java_Basic_5" translatable="false">3 Identifiers in Java  Identifiers are names used for classes, variables, and methods. All Java components require names.  There are several rules in the syntax of the Java language that you must remember about the identifier. They are as follows:  Each identifier must begin with “A” to “Z” or “a” to “z”, “$” or “_”.  After the first character, it can have any combination of characters.  The keyword cannot be used as an identifier.  Most importantly, an identifier in Java is case sensitive.  Correct spelling example: age, $ salary, _value, __1_value.  Example misspelling: 123abc, -salary.</string>
    <string name="Java_Basic_6" translatable="false">4 Listing  Recounting is a limitation of a variable to select only one of several predefined values. The values ​​in this enumerated list are called enumerations.     For instance:  class FreshJuice {// create a class FreshJuice  enum FreshJuiceSize {SMALL, MEDIUM, LARGE} // create a variable that contains the constants SMALL, MEDIUM, LARGE  FreshJuiceSize size; // create a variable size in which the constants SMALL MEDIUM LARGE will be located  }  public class FreshJuiceTest {// create a class FreshJuiceTest  public static void main (String args []) {// create a public static string method  FreshJuice juice = new FreshJuice (); // create a variable that will take variables from the FreshJuice class  juice.size = FreshJuice.FreshJuiceSize.MEDIUM; // Declare that juice.size equals the word MEDIUM  System.out.println (\"Size:\" + juice.size); }} // display that the size of a pack of juice is MEDIUM</string>
    <string name="Java_Basic_7" translatable="false">5 Modifiers in Java  In Java, you can also modify classes, methods, etc. using modifiers. Modifiers in Java are divided into 2 types:  With access (default, public, protected, private)  No Access (final, abstract, strictfp)  To use a modifier in Java, you must include its keyword in the definition of a class, method, or variable. The modifier should be ahead of the rest of the operator.</string>
    <string name="Java_Basic_8" translatable="false">6 Keywords in Java  A total of 50 keywords are reserved in Java. The following is a list of reserved keywords.  Abstract, assert, boolean, break, byte, case, catch, char, class, const, contunue, default, do, double, else, enum, extends, final, finally, float, for, goto, if, implements, import, instnceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while</string>
    <string name="Java_VaO">1 Variables in Java  The variable is provided to us by the storage name so that our program can be manipulated. Each variable in Java has a specific type that determines the size and placement of it in memory; range of values ​​that can be stored in memory; and a set of operations that can be applied to the variable.  All variables must be declared before using them. Below is the basic form of the ad:  data type variable [= value], [variable [= value], ...];  To declare more than one variable of a specified type, you can use a comma-separated list as delimiters.  What are the data types in Java  Int - create integer data  Byte - Create integer data with a range of -128 to 127  Short - create integer data with a range of -32768 to 32767  Long - create integer data with a range of -9223372036854775808 to 9223372036854775807  Float - creation of floating point numbers range from ~ 1.4 * 10-45 to ~ 3.4 * 1038  Double - creation of both integers and floating-point numbers, the range is from ~ 4.9 * 10-324 to ~ 1.8 * 10308  Char - creating a character data type.  Boolean - a data type that creates 1 bit of information, where there are possible options either 1 (true) or 0 (false). The default value is 0 (false)  2 Standard Operators in Java  There are operators in Java, thanks to which you can do the same as in class 7 mathematics, all arithmetic operations, logical actions and comparing actions</string>
    <string name="Java_VaO_2">2 Standard Operators in Java  There are operators in Java, thanks to which you can do the same as in class 7 mathematics, all arithmetic operations, logical actions and comparing actions</string>
    <string name="Java_VaO_3">2.1 Arithmetic operators  Java uses arithmetic operators such as:  + - addition  - - subtraction  * - multiplication  / - division  % - remainder after division</string>
    <string name="Java_VaO_4">2.2 Increment and decrement  In Java, to add 1 or more to your number, you can write  i = i + your number  It will also work with another arithmetic operator, but if you want to add or subtract only 1, you can write that it would be shorter  i = i ++ or i--</string>
    <string name="Java_VaO_5">2.3 Comparison operator  Also in Java you can compare variables with variables or, with numbers, comparing operators > - more  &gt; - less  "==" - equals  The differences "=" and "==" in that ordinary "=", we assign a certain value to a certain element, and "==" we use to compare whether one element is equal to another elements.  >= - greater than or equal to  &lt;=- less than or equal to  "!=" - not equa</string>
    <string name="Java_VaO_6">3 Logical operators (and, or, not)  In Java, you can also do a chain of logical operations when comparing elements. Jave has operators like  The “and” operator &amp;&amp; is a logical operator that is used to create a comparison chain in which the result will be true if all arguments are true.  The “or" || operator is a logical operator that is used to create a comparison chain in which the result will be true if one or more arguments has True  The no operator! Is a logical operator that is used to turn True to False and False to True.</string>
    <string name="Java_Circle">1 if comparison operator  The if statement compares 2 values, if the comparison is true, performs an action  The else statement is used if the comparison is false, so another action is performed</string>
    <string name="Java_Circle_2">2 Switch select statement  An operator that is a set of if / else statements, but unlike if / else, in switch we compare the variable. With multiple constant values.</string>
    <string name="Java_Circle_3">3 For loop  Before learning about cycles, we must find out what a cycle is. A cycle is an operation repeating a certain number of times the same sequence of operations.  Now that we’ve figured out what a loop is, we can find out what a For loop is. The For loop is a multiple loop through the same program code. for (start; condition; step) {// ... loop body ...}</string>
    <string name="Java_Circle_4">4 While Loop  While loop is used when we do not know how much repetition is required to be carried out in a loop, we need a while loop. while (condition) {\"body of the loop\"}</string>
    <string name="Java_Circle_5">5 Do While Loop    The do while loop, it is very similar to the while loop, but the only difference is that once the loop should work. do {    // loop body } while (condition);</string>
    <string name="Java_Massivs">1 Arrays  Before you study this topic, you need to find out what an array is. An array is a data structure that stores a set of values identified by an index. Arrays are divided into one-dimensional, two-dimensional and three-dimensional, etc.</string>
    <string name="Java_Massivs_2">1.1 One-dimensional arrays  A one-dimensional array is an array that uses a single index.</string>
    <string name="Java_Massivs_3">1.2 two-dimensional array  A two-dimensional array, in fact, does not change the value from a one-dimensional array, but with one difference, a multi-dimensional array has 2 indexes.</string>
    <string name="Java_Massivs_4">1.3 multidimensional array  A multidimensional array is still the same array, only which uses more than 2 indexes.</string>
    <string name="Java_Massivs_5">2 Filling an array To fill an array, you must first declare an array: data type [] is the name of the array.  After declaring the array, you need to determine how long the array will be: array name = new data type [array length]  After we have determined the length of the array, we will have to fill it, the For loop will help us in this: for (int i = 0; i &lt;array limit; i ++)          array_name [i] = data entry;</string>
    <string name="Java_Class">1. Object-oriented programming  Object-oriented programming (OOP) is a programming method in which the basic concept is the concept of objects and classes</string>
    <string name="Java_Class_2">2 OOP Principles  There are many principles in the PLO, but so far we will focus on the most important principles, which you will come across quite often.  Encapsulation is a property of the system that allows you to combine data and methods that work with them in a class and hide implementation details from the user.  Abstraction is a way to highlight a set of significant characteristics of an object, excluding from insignificant consideration. Accordingly, abstraction is a set of all such characteristics.  Inheritance is a property of the system that allows you to describe a new class on the basis of an existing one with partially or fully borrowed functionality. The class from which inheritance is derived is called the base, parent, or superclass. New class - descendant, descendant or derived class  Polymorphism is a property of the system to use objects with the same interface without information about the type and internal structure of the object.</string>
    <string name="Java_Class_3">3 Object and classes  The main thing that stands in OOP is an object and classes, first we’ll figure out what an object and a class are.  An object is an entity, an instance of a class to which messages can be sent and which can respond to them using its data. Object data is hidden from the rest of the program.  A class is the main element within which the object is constructed.</string>
    <string name="Java_Class_4">4 Methods in OOP  A method in OOP is a class description.  For example, we have Machines, this is a class and we write how much it weighs, which engine, make, mileage, etc. this will already be the method.</string>
    <string name="Java_Class_5">5 Seteri and Geteri  When encapsulating, we hide everything from the user inside the class due to which we cannot pull out a lot of data if we do not use seteri and geteri, where you protect the contents of the program.</string>
    <string name="Java_Class_6">6 Inheritance  Inheritance is the process by which one object can acquire the properties of another. More precisely, an object can inherit the basic properties of another object and add features characteristic of it to them.</string>
</resources>
