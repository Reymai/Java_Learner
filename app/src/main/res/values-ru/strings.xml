<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="login">Авторизация</string>
    <string name="sign_up">Регистрация</string>
    <string name="repeat_password">Повторите пароль</string>
    <string name="forgot_the_password">Забыли пароль?</string>
    <string name="e_mail">Электронная почта</string>
    <string name="username">Имя пользователя</string>
    <string name="Login_to_registration_string">В Java есть операторы, благодаря которым вы можете делать тоже самое что и в математике 7 класса, все арифметические действия, логические действия и сравнивающие действия</string>
    <string name="language">Язык</string>
    <string name="sound">Звук</string>
    <string name="Java_Basic">"1 Что такое Java?   Java это универсальный язык програмированния, где в основе лежит Обьекто Орентированное Програмированние. Данный язык используется в Андроид Приложениях, для некоторых смарт вещей например: Чайник, Часы, Браслеты и т.д, в некоторых автомобилях и компьютерных приложений.   2.2 Синтаксисы Java   Синтаксисы в Java идут классы,объекты, методы, переменные экземпляры.   Объекты - объекты имеют состояние и поведение. Например: собака может иметь состояние — цвет, имя, а также и поведение — кивать, бежать, лаять, кушать. Объект является экземпляром класса.   Класс - может быть определен как шаблон, который описывает поведение объекта.   Метод - является в основном поведением. Класс может содержать несколько методов. Именно в методах логически записанные данные манипулируют и выполняют все действия.   Переменная экземпляра - каждый объект имеет свой уникальный набор переменных экземпляра. Состояние объекта создается значениями, присвоенными этим переменным экземпляра.    2.2 Синтаксисы Java   Давайте рассмотрим простой код      public class MyFirstJavaProgram // создаём публичный класс MyFirstJavaProgram      { public static void main(String []args) {  // создаём статичный публичный стринговый метод       / System.out.println(\" hello world!\"); // Вывод сообщения на экран } } // выводит на экран предложение “hello world!”    2.2 Основы синтаксисы Java   Очень важно знать и помнить следующие моменты в синтаксисе:   Чувствительность к регистру — Java чувствителен к регистру, то есть идентификатор Hello и hello имеют разный смысл.   Название классов — для всех первая буква должна быть в верхнем регистре.   Если несколько слов используются, чтобы сформировать название класса, первая буква каждого внутреннего слова должна быть в верхнем регистре, например, «MyJavaClass».   Название методов — в синтаксисе Java все имена методов должны начинаться с буквы нижнего регистра.   Если несколько слов используются, чтобы сформировать имя метода, то первая буква каждого внутреннего слова должна быть в верхнем регистре, например, «public void myMethodName()».   Название файла программы — наименование файла программы должно точно совпадать с именем класса.  \tить «.java» в конце имени (если имена не совпадают, Ваша программа не будет компилироваться), например, «MyJavaProgram» — это название класса, тогда файл должен быть сохранен как «MyJavaProgram.java».   public static void main(String args[]) — обработка программы начинается с метода main(), который является обязательной частью каждой программы.    2.3 Индентификаторы в Java   Идентификаторы — имена, используемые для классов, переменных и методов. Все компоненты Java требуют имена.   Существует несколько правил в синтаксисе языка Java, которые необходимо помнить об идентификаторе. Они следующие:   Каждый идентификатор должен начинаться с «A» до «Z» или «a» до «z», «$» или «_».   После первого символа может иметь любую комбинацию символов.   Ключевое слово не может быть использовано в качестве идентификатора.   Самое главное — идентификатор в Java чувствителен к регистру.   Пример правильного написания: age, $salary, _value, __1_value.   Пример неправильного написания: 123abc, -salary.    2.4 Перечисление   Перечесление это ограничение переменной, чтобы выбрать только одно из нескольких предопределенных значений. Значения в этом перечисляемом списке называются перечисления.      Например:   class FreshJuice {  //создаём класс FreshJuice   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE } //создаём переменную в которой находятся константы SMALL, MEDIUM,LARGE   FreshJuiceSize size; //создаём переменную size в которой будут находиться константы SMALL MEDIUM LARGE   }    public class FreshJuiceTest { //создаём класс FreshJuiceTest   public static void main(String args[]){  //создаём публичный статичный стринговый метод   FreshJuice juice = new FreshJuice();  // создаём переменную, которая будет брать переменные из класса FreshJuice   juice.size = FreshJuice.FreshJuiceSize.MEDIUM; //Объявляем что juice.size равняется слово MEDIUM   System.out.println(\"Размер: \" + juice.size); } } //выводим на экран, что размер пачки сока MEDIUM    2.5 Модификаторы в Java   В Java, можно так же модифицировать классы, методы и т.д с помощью модификаторов. Модификаторы в Java деляться на 2 типа:   С доступом (default, public, protected, private)   Без Доступа (final, abstract, strictfp)   Чтобы использовать модификатор в Java, нужно включить его ключевое слово в определение класса, метода или переменной. Модификатор должен быть впереди остальной части оператора.    2.6 Ключевые слова в Java   Всего зарезервировано 50 ключевых слов в Java. Ниже приведен список зарезервированных ключевых слов.    Abstract,assert,boolean,break,byte,case,catch,char,class,const,contunue,default,do,double,else,enum,extends,final,finally,float,for,goto,if,implements,import,instnceof,int,interface,long,native,new,package,private,protected,public,return,short,static,strictfp,super,switch,synchronized,this,throw,throws,transient,try,void,volatile,while "</string>
    <string name="Java_Basic_2">"2 Синтаксисы Java   Синтаксисы в Java идут классы,объекты, методы, переменные экземпляры.   Объекты - объекты имеют состояние и поведение. Например: собака может иметь состояние — цвет, имя, а также и поведение — кивать, бежать, лаять, кушать. Объект является экземпляром класса.   Класс - может быть определен как шаблон, который описывает поведение объекта.   Метод - является в основном поведением. Класс может содержать несколько методов. Именно в методах логически записанные данные манипулируют и выполняют все действия.   Переменная экземпляра - каждый объект имеет свой уникальный набор переменных экземпляра. Состояние объекта создается значениями, присвоенными этим переменным экземпляра. "</string>
    <string name="app_name" translatable="false">"Объекты - объекты имеют состояние и поведение. Например: собака может иметь состояние — цвет, имя, а также и поведение — кивать, бежать, лаять, кушать. Объект является экземпляром класса. "</string>
    <string name="Java_Basic_3">"2.1 Синтаксисы Java   Давайте рассмотрим простой код      public class MyFirstJavaProgram // создаём публичный класс MyFirstJavaProgram      { public static void main(String []args) {  // создаём статичный публичный стринговый метод       / System.out.println(\" hello world!\"); // Вывод сообщения на экран } } // выводит на экран предложение “hello world!” "</string>
    <string name="Java_Basic_4">"2.2 Основы синтаксисы Java   Очень важно знать и помнить следующие моменты в синтаксисе:   Чувствительность к регистру — Java чувствителен к регистру, то есть идентификатор Hello и hello имеют разный смысл.   Название классов — для всех первая буква должна быть в верхнем регистре.   Если несколько слов используются, чтобы сформировать название класса, первая буква каждого внутреннего слова должна быть в верхнем регистре, например, «MyJavaClass».   Название методов — в синтаксисе Java все имена методов должны начинаться с буквы нижнего регистра.   Если несколько слов используются, чтобы сформировать имя метода, то первая буква каждого внутреннего слова должна быть в верхнем регистре, например, «public void myMethodName()».   Название файла программы — наименование файла программы должно точно совпадать с именем класса.  \tить «.java» в конце имени (если имена не совпадают, Ваша программа не будет компилироваться), например, «MyJavaProgram» — это название класса, тогда файл должен быть сохранен как «MyJavaProgram.java».   public static void main(String args[]) — обработка программы начинается с метода main(), который является обязательной частью каждой программы. "</string>
    <string name="Java_Basic_5">"3 Индентификаторы в Java   Идентификаторы — имена, используемые для классов, переменных и методов. Все компоненты Java требуют имена.   Существует несколько правил в синтаксисе языка Java, которые необходимо помнить об идентификаторе. Они следующие:   Каждый идентификатор должен начинаться с «A» до «Z» или «a» до «z», «$» или «_».   После первого символа может иметь любую комбинацию символов.   Ключевое слово не может быть использовано в качестве идентификатора.   Самое главное — идентификатор в Java чувствителен к регистру.   Пример правильного написания: age, $salary, _value, __1_value.   Пример неправильного написания: 123abc, -salary. "</string>
    <string name="Java_Basic_6">"4 Перечисление   Перечесление это ограничение переменной, чтобы выбрать только одно из нескольких предопределенных значений. Значения в этом перечисляемом списке называются перечисления.      Например:   class FreshJuice {  //создаём класс FreshJuice   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE } //создаём переменную в которой находятся константы SMALL, MEDIUM,LARGE   FreshJuiceSize size; //создаём переменную size в которой будут находиться константы SMALL MEDIUM LARGE   }    public class FreshJuiceTest { //создаём класс FreshJuiceTest   public static void main(String args[]){  //создаём публичный статичный стринговый метод   FreshJuice juice = new FreshJuice();  // создаём переменную, которая будет брать переменные из класса FreshJuice   juice.size = FreshJuice.FreshJuiceSize.MEDIUM; //Объявляем что juice.size равняется слово MEDIUM   System.out.println(\"Размер: \" + juice.size); } } //выводим на экран, что размер пачки сока MEDIUM "</string>
    <string name="Java_Basic_7">5 Модификаторы в Java   В Java, можно так же модифицировать классы, методы и т.д с помощью модификаторов. Модификаторы в Java деляться на 2 типа:   С доступом (default, public, protected, private)   Без Доступа (final, abstract, strictfp)   Чтобы использовать модификатор в Java, нужно включить его ключевое слово в определение класса, метода или переменной. Модификатор должен быть впереди остальной части оператора.</string>
    <string name="Java_Basic_8">"6 Ключевые слова в Java   Всего зарезервировано 50 ключевых слов в Java. Ниже приведен список зарезервированных ключевых слов.    Abstract,assert,boolean,break,byte,case,catch,char,class,const,contunue,default,do,double,else,enum,extends,final,finally,float,for,goto,if,implements,import,instnceof,int,interface,long,native,new,package,private,protected,public,return,short,static,strictfp,super,switch,synchronized,this,throw,throws,transient,try,void,volatile,while "</string>
    <string name="Java_VaO">"1 Переменные в Java   Переменная предоставляется нам именем хранения, чтобы нашей программой можно было манипулировать. Каждая переменная в Java имеет конкретный тип, который определяет размер и размещение её в памяти; диапазон значений, которые могут храниться в памяти; и набор операций, которые могут быть применены к переменной.   Необходимо объявить все переменные, прежде чем их использовать. Ниже показана основная форма объявления:   тип данных переменная [ = значение], [переменная [= значение], ...] ;   Чтобы объявить более чем одну переменную указанного типа, можно использовать список с запятыми в качестве разделителей.   Какие есть типы данных в Java   Int - создание целочисленных данных   Byte - создание целочисленных данных с диапазоном -128 до 127   Short - создание целочисленных данных с диапазоном -32768 до 32767   Long - создание целочисленных данных с диапазоном -9223372036854775808 до 9223372036854775807   Float - создание чисел с плавающей точкой диапазон от ~1,4*10-45 до ~3,4*1038   Double - создание как целочисленных так и числа с плавающей точкой, диапазон от ~4,9*10-324   до  ~1,8*10308   Char - создание символьный тип данных.    Boolean - тип данных что создаёт 1 бит информации, где есть возможные варианты либо 1 (true), либо 0 (false). По умолчанию задаётся 0 (false) "</string>
    <string name="Java_VaO_2">2 Стандартные операторы в Java   В Java есть операторы, благодаря которым вы можете делать тоже самое что и в математике 7 класса, все арифметические действия, логические действия и сравнивающие действия</string>
    <string name="Java_VaO_3">2.1       Арифметические операторы   В Java используются такие арифметические операторы, как:   + - сложение   - - вычитание   * - умножение   / - деление    % - остаток после деление</string>
    <string name="Java_VaO_4">"2.2 Инкремент и декремент    В Java что бы прибавить к вашему числу 1 или больше вы можете написать   i= i + ваше число   Так же будет и работать с другим арифметическим оператором, но если вы хотите прибавить или отнять, лишь 1, то можете написать, что бы было короче   i=i++ или i-- "</string>
    <string name="Java_VaO_5"> 2.3 Сравнивающий оператор   Так же в Java можно сравнивать переменные с переменными или же, с числами, сравнивающие операторы   >  - больше   &gt; - меньше   == -   равняется   Отличии = и == тем, что обычное =, мы присеваем определённому элементу, определённое значение, а == мы используем в сравнивание, является ли один элемент равным другому элементы.   >= - больше или равно   &lt;= - меньше или равно   != - не равно </string>
    <string name="Java_VaO_6">3 Логические операторы (и, или, не)   В Java так же можно делать цепь логических операций, при сравнивании элементов. В Jave есть такие операторы как   Оператор “и” &amp;&amp; - логический оператор, который используется для создания цепи сравнения, в которой результат будет true, если во всех аргументах будет true.   Оператор “или" || - логический оператор, который используется для созданиея цепи сравнения, в которой результат будет true, если у одного или более аргументов будет True   Оператор “нет" ! - логический оператор, который используется для превращения True в False и False в True.</string>
    <string name="Java_Circle">1 Оператор сравнения if   Оператор if сравнивает 2 величины, если сравнение является правдой, выполняет какое либо действие   Оператор else используется если же сравнение является ложью, следовательно выполняется другое действие</string>
    <string name="Java_Circle_2">"2 Оператор выбора Switch   Оператор который является множеством операторов if/else, но в отличии от if/else, в switch мы сравниваем переменну. С несклолькими константыми значениями. "</string>
    <string name="Java_Circle_3">"3  Цикл For   Перед тем, как узнавать про циклы, мы должны узнать, что такое вообще цикл. Цикл это повторяющая определенное количество раз одинаковая последовательность операция.   Теперь когда мы разобрались, что такое цикл, мы можем узнать, что такое цикл For. Цикл For это многократное прохождение по одному и тому же коду программы. for (начало; условие; шаг) { // ... тело цикла ... } "</string>
    <string name="Java_Circle_4">4 Цикл While   Цикл While используем когда мы не знаем сколько требуется повторение должно провестись в цикле, нам нонадобиться цикл while. while (condition) { \"телом цикла\" }</string>
    <string name="Java_Circle_5">5 Цикл Do While    Цикл do while, он очень похоже на цикл while, но в единственном отличии в том, что один раз цикл должен будет сработать.  do {   // тело цикла } while (condition);</string>
    <string name="Java_Massivs">1 Масивы   Перед тем как изучать эту тему нужно узнать, что такое массив. Массив это структура данных, хранящая набор значений, идентифицируемых по индексу. Массивы деляться на одномерные, двумерные и трёхмерные и т.д</string>
    <string name="Java_Massivs_2">"1.1 Одномерные массивы   Одномерный массив, это массив, в котором используется один индекс. "</string>
    <string name="Java_Massivs_3">1.2 двумерный массив   Двумерный массив, по сути, не меняет значения от одномерного массива, но с одним отличием у многомерного массива 2 индекса.</string>
    <string name="Java_Massivs_4">1.3 многомерный массив   Многомерный массив это всё тот же самый массив, только в котором используется больше 2 индексов.</string>
    <string name="Java_Massivs_5">2 Заполнение массива Для заполнение массива требуется первоначально объявить массив: тип данных [] название массива.  После объявление массива требуется определить какой длины будет массив: название массива = new тип данных [длинна массива]  После того как мы определили длину массива мы должны будет заполнить его, нам поможет в этом цикл For: for (int i = 0; i &lt; лимит массива; i++)         название_массива[i] = ввод данных;</string>
    <string name="Java_Class">"1. Обьекто ориентированное програмирование   Обьекто ориентированное програмирование (ООП), это метод программирования, в котором основным концептом является понятие обьектов и классов "</string>
    <string name="Java_Class_2">2 Принципы ооп   В ООП есть множество принцыпов, но пока что мы остановимся на самых важых принцыпах, которые будут вам довольно таки часто попадаться.   Инкапсуляция — это свойство системы, позволяющее объединить данные и методы, работающие с ними в классе, и скрыть детали реализации от пользователя.   Абстрагирование — это способ выделить набор значимых характеристик объекта, исключая из рассмотрения не значимые  Соответственно, абстракция — это набор всех таких характеристик.   Наследование — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником или производным классом   Полиморфизм — это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.</string>
    <string name="Java_Class_3">"3 Объект и классы   Основное что стоит в ООП, это объект и классы, сперва разберёмся, что такое объект и класс   Объект -   это сущность, экземпляр класса, которой можно посылать сообщения и которая может на них реагировать, используя свои данные. Данные объекта скрыты от остальной программы.        Класс - это основной элемент, в рамках которого осуществляется конструирование обьекта. "</string>
    <string name="Java_Class_4">4 Методы в ООП   Метод в ООП это описание класса.   Например, у нас есть Машины, это класс и мы пишем сколько весит, какой двигатель, марка, километраж и т.п это уже и будет методом.</string>
    <string name="Java_Class_5">"5 Сетери и Гетери   При инкапсуляции, мы всё от пользователя скрываем внутри класса из-за чего мы не можем многие данные вытащить, если не используем seteri и geteri, где вы защищаете содержимое программы. "</string>
    <string name="Java_Class_6">"6 Наследование   Наследование — это процесс, посредством которого один объект может приобретать свойства другого. Точнее, объект может наследовать основные свойства другого объекта и добавлять к ним черты, характерные только для него. "</string>
</resources>
